-Q theories fae_gtlc_mu
-arg -w -arg -redundant-canonical-projection
-arg -w -arg -projection-no-head-constant
-arg -w -arg -convert_concl_no_check

# Some technical results about substitution, definition of closedness (types, terms, expressions...)
theories/prelude.v

# Defining the simply typed lambda calculus with iso-recursive types
theories/stlc_mu/types.v # defining static types
theories/stlc_mu/types_lemmas.v # boring lemmas about these types
theories/stlc_mu/types_notations.v # some notations for types
theories/stlc_mu/lang.v # defining expressions, values, evaluation contexts, head steps...
theories/stlc_mu/lang_lemmas.v # boring lemmas about lang
theories/stlc_mu/typing.v # typing rules
theories/stlc_mu/typing_lemmas.v # boring lemmas about typing rules
theories/stlc_mu/contexts.v # contexts
theories/stlc_mu/ctx_equiv.v # defines contextual equivalence

# Defining the gradually typed lambda calculus with iso-recursive types
theories/cast_calculus/types.v # defining gradual types (just the same but with unknown type)
theories/cast_calculus/types_lemmas.v # boring lemmas about these types
theories/cast_calculus/types_notations.v # some notations for types
theories/cast_calculus/consistency.v # definition of conventional consistency relation
theories/cast_calculus/consistency_lemmas.v # boring lemmas
theories/cast_calculus/lang.v # defining expressions, values, evaluation contexts, evaluation steps...
theories/cast_calculus/lang_lemmas.v # boring lemmas about lang
theories/cast_calculus/typing.v # typing rules
theories/cast_calculus/typing_lemmas.v # boring lemmas about typing rules
theories/cast_calculus/contexts.v # contexts
theories/cast_calculus/ctx_equiv.v # defines contextual equivalence

# Defining the embedding from the static to the gradual language
theories/embedding/expressions.v # on expressions
theories/embedding/contexts.v # on contexts
theories/embedding/types.v # on types
theories/embedding/types_lemmas.v # boring lemmas on the embedding on types
theories/embedding/well_typedness.v # proves preservation of well-typedness

# Defining alternative consistency relation on which we will define backtranslation
theories/backtranslation/alternative_consistency.v # as in figure 9 of paper

# Proof that regular consistency implies our alternative one (as claimed on p15 in the paper) (will be used in backtranslation on expressions)
theories/backtranslation/implication_consistencies/help_lemmas/listset_ext.v # technical helper lemmas
theories/backtranslation/implication_consistencies/help_lemmas/closed_rec_types.v # technical helper lemmas
theories/backtranslation/implication_consistencies/help_lemmas/upper_bound.v # technical helper lemmas
theories/backtranslation/implication_consistencies/help_lemmas/intermediate.v # technical helper lemmas
theories/backtranslation/implication_consistencies/help_lemmas/first_half.v # technical helper lemmas
theories/backtranslation/implication_consistencies/help_lemmas/second_half.v # technical helper lemmas
theories/backtranslation/implication_consistencies/proof.v # actual proof

# Defining backtranslation on types
theories/backtranslation/cast_help/universe.v # defining the universe
theories/backtranslation/types.v # on types
theories/backtranslation/types_lemmas.v # boring lemmas on backtranslation of types

# The heavy lifting of the backtranslation; i.e. the backtranslation on casts (section 4.2 in the paper)
theories/backtranslation/cast_help/fix.v # defining fix operator
theories/backtranslation/cast_help/embed.v # upcasts from ground
theories/backtranslation/cast_help/extract.v # downcasts to ground
theories/backtranslation/cast_help/factorize.v # factorizing upcasts and downcasts
theories/backtranslation/cast_help/between.v # casts between sum, product, recursive and arrow types
theories/backtranslation/cast_help/general_def.v # general casts
theories/backtranslation/cast_help/general_def_lemmas.v # boring lemmas about it
theories/backtranslation/cast_help/props/extract_embed.v
theories/backtranslation/cast_help/props/between_rec_fix.v

# Defining the backtranslation on terms, context and proving preservation of well-typedness
theories/backtranslation/expressions.v
theories/backtranslation/contexts.v
theories/backtranslation/well_typedness.v

# Defining logical relations (static<gradual)
theories/refinements/static_gradual/resources_left.v # setting up resources for static side
theories/refinements/static_gradual/resources_right.v # setting up resources for gradual side
theories/refinements/static_gradual/logical_relation.v # defining logical relations (section 4.3.3 in paper)

# Compoatibility lemmas (static<gradual)
theories/refinements/static_gradual/compat_easy.v # the unexciting lemmas (fig 12 in the paper)
# below the files that prove the interesting compatibility lemma (lemma 4.7 in paper)
theories/refinements/static_gradual/compat_cast/defs.v
theories/refinements/static_gradual/compat_cast/sum_sum.v
theories/refinements/static_gradual/compat_cast/prod_prod.v
theories/refinements/static_gradual/compat_cast/arrow_arrow.v
theories/refinements/static_gradual/compat_cast/identity.v
theories/refinements/static_gradual/compat_cast/between_rec.v
theories/refinements/static_gradual/compat_cast/ground_star.v
theories/refinements/static_gradual/compat_cast/star_ground.v
theories/refinements/static_gradual/compat_cast/tau_star.v
theories/refinements/static_gradual/compat_cast/star_tau.v
theories/refinements/static_gradual/compat_cast/all.v

# relating gradual contexts to their backtranslation; relating static terms to their embeddings (lemma 4.2) (static<gradual)
theories/refinements/static_gradual/rel_ref_specs.v

# proving adequacy of logical relations (lemma 4.3) (static<gradual)
theories/refinements/static_gradual/adequacy.v

# Defining logical relations (gradual<static)
theories/refinements/gradual_static/resources_left.v # setting up resources for gradual side
theories/refinements/gradual_static/resources_right.v # setting up resources for static side
theories/refinements/gradual_static/logical_relation.v # defining logical relations

# Compoatibility lemmas (static<gradual)
theories/refinements/gradual_static/compat_easy.v # the unexciting lemmas
# below the files that prove the interesting compatibility lemma (lemma 4.7 in paper)
theories/refinements/gradual_static/compat_cast/defs.v
theories/refinements/gradual_static/compat_cast/sum_sum.v
theories/refinements/gradual_static/compat_cast/prod_prod.v
theories/refinements/gradual_static/compat_cast/arrow_arrow.v
theories/refinements/gradual_static/compat_cast/identity.v
theories/refinements/gradual_static/compat_cast/between_rec.v
theories/refinements/gradual_static/compat_cast/ground_star.v
theories/refinements/gradual_static/compat_cast/star_ground.v
theories/refinements/gradual_static/compat_cast/tau_star.v
theories/refinements/gradual_static/compat_cast/star_tau.v
theories/refinements/gradual_static/compat_cast/all.v

# # relating gradual contexts to their backtranslation; relating static terms to their embeddings (lemma 4.4) (gradual<static)
theories/refinements/gradual_static/rel_ref_specs.v

# # proving adequacy of logical relations (lemma 4.5) (gradual<static)
theories/refinements/gradual_static/adequacy.v

# defines contextual equivalence in static and gradual language; proves full abstraction
theories/fae.v